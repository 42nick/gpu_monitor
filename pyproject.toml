[project]
name = "gpu_monitor"
version = "0.0.0"
description = "Monitor your programms gpu and ram usage"
authors = [{ name = "Niklas Hahn", email = "smartcoder42@gmail.com" }]
requires-python = "~=3.9"
readme = "README.md"
license = "MIT"
dependencies = ["psutil>=6.1.0,<7"]

[project.optional-dependencies]
visu = [
    "plotly>=5.24.1,<6",
    "pandas>=2.2.3,<3",
    "dash>=2.18.2,<3",
]

[project.scripts]
gpu-monitor = "gpu_monitor.main:main"

[dependency-groups]
test = [
    "coverage>=7.3.2,<8",
    "mypy>=1.5.1,<2",
    "pre-commit>=4.0.1,<5",
    "pytest>=7.4.2,<8",
    "pytest-cov>=4.1.0,<5",
    "ruff>=0.7.3,<0.8",
    "tox>=4.14.2,<5",
]

[tool.uv]
default-groups = ["test"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "D104",   # undocumented-public-package
  "D211",   # blank-line-before-class
  "D213",   # multi-line-summary-second-line
  "D413",   # Missing blank line after last section ("Args")
  "DTZ005", # call-datetime-now-without-tzinfo
  "G004",   # Logging statement uses f-string
  "FBT",    # flake8-boolean-trap
  "PD901",  # Avoid using the generic variable name `df` for DataFrames
  "PTH123", # builtin-open
  "T20",    # Allow print statements
]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  # at least this three should be fine in tests:
  "S101",    # asserts allowed in tests...
  "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
  "PLR2004", # Magic value used in comparison, ...
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
known-first-party = ["transformers"]
lines-after-imports = 2

[tool.ruff.lint.pylint]
max-args = 9

[tool.pytest.ini_options]
addopts = "-v --cov=gpu_monitor --cov-branch --cov-report html:reports/html --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise AssertionError",
  "def __repr__",
  "def __str__",
  "if __name__ == .__main__.:",
  "raise NotImplementedError",
]

[tool.coverage.run]
branch = true
data_file = "reports/.coverage"

[tool.mypy]
strict = true
warn_return_any = false
